-- Tabela de Funcionários
CREATE TABLE FUNCIONARIO (
    COD_FUNCIONARIO INT PRIMARY KEY,
    NOME VARCHAR(100),
    DT_NASCIMENTO DATE,
    SALARIO FLOAT,
    META_MENSAL FLOAT,
    QTD_VENDIDA_NO_MES FLOAT
);

-- Inserção de dados na tabela FUNCIONARIO
INSERT INTO FUNCIONARIO (COD_FUNCIONARIO, NOME, DT_NASCIMENTO, SALARIO, META_MENSAL, QTD_VENDIDA_NO_MES) VALUES
(1, 'Carlos Alberto Silva', '1985-03-15', 3500.00, 10000.00, 0),
(2, 'Beatriz Ferreira Souza', '1992-07-20', 2800.00, 8000.00, 0),
(3, 'Ricardo Lima Azevedo', '1978-11-05', 4200.00, 12000.00, 0);

-- Tabela de Clientes (referenciada por VENDA)
CREATE TABLE CLIENTE (
    COD_CLIENTE INT PRIMARY KEY,
    NOME VARCHAR(100),
    DT_NASCIMENTO DATE, 
    QTD_GASTO FLOAT
);

-- Inserção de dados na tabela CLIENTE
INSERT INTO CLIENTE (COD_CLIENTE, NOME, DT_NASCIMENTO, QTD_GASTO) VALUES
(1, 'Fernanda Moreira Costa', '1990-01-25', 0),
(2, 'Lucas Dias Martins', '1988-06-10', 0),
(3, 'Juliana Pereira Alves', '2000-09-30', 0),
(4, 'TecnoSoluções Avançadas Ltda', '2010-04-12', 0),
(5, 'Comércio Varejista XYZ EIRELI', '2015-08-01', 0),
(6, 'Serviços Gerais Alfa & Filhos S.A.', '2005-11-20', 0);

-- Pessoa Física (referência a CLIENTE)
CREATE TABLE PESSOA_FISICA (
    COD_CLIENTE INT PRIMARY KEY, 
    CPF VARCHAR(14) UNIQUE NOT NULL,
    FOREIGN KEY (COD_CLIENTE) REFERENCES CLIENTE(COD_CLIENTE)
);

INSERT INTO PESSOA_FISICA (COD_CLIENTE, CPF) VALUES
(1, '11122233344'),
(2, '55566677788'),
(3, '99900011122');

-- Pessoa Jurídica (referência a CLIENTE)
CREATE TABLE PESSOA_JURIDICA (
    COD_CLIENTE INT PRIMARY KEY,
    CNPJ VARCHAR(18) UNIQUE NOT NULL,   
    FOREIGN KEY (COD_CLIENTE) REFERENCES CLIENTE(COD_CLIENTE)
);

INSERT INTO PESSOA_JURIDICA (COD_CLIENTE, CNPJ) VALUES
(4, '11222333000144'),
(5, '44555666000188'),
(6, '77888999000122');

-- Tabela de Vendas (referência a FUNCIONARIO e CLIENTE)
CREATE TABLE VENDA (
    COD_VENDA INT PRIMARY KEY,
    COD_FUNCIONARIO INT,
    COD_CLIENTE INT,
    VALOR_TOTAL FLOAT,
    DT_VENDA DATE,
    FOREIGN KEY (COD_FUNCIONARIO) REFERENCES FUNCIONARIO(COD_FUNCIONARIO),
    FOREIGN KEY (COD_CLIENTE) REFERENCES CLIENTE(COD_CLIENTE)
);

-- Tabela de Itens de Venda (referência a VENDA e LOJA_CARRO)
CREATE TABLE ITEM_VENDA (
    COD_ITEM_VENDA INT PRIMARY KEY,
    COD_VENDA INT,
    COD_LOJA_CARRO INT,
    QTD_DE_ITENS INT,
    FOREIGN KEY (COD_VENDA) REFERENCES VENDA(COD_VENDA)
);

-- Tabela de Cores (referência para CARRO)
CREATE TABLE COR (
    COD_COR INT PRIMARY KEY, 
    NOME VARCHAR(20)
);

INSERT INTO COR 
VALUES 
(1, 'PRETO'),
(2, 'BRANCO'),
(3, 'PRATA');

-- Tabela de Lojas (referência para LOJA_CARRO)
CREATE TABLE LOJA (
    COD_LOJA INT PRIMARY KEY, 
    NOME VARCHAR(20)
);

INSERT INTO LOJA
VALUES
(1, 'LOJA 1'),
(2, 'LOJA 2'),
(3, 'LOJA 3');

-- Tabela de Marcas (referência para CARRO)
CREATE TABLE MARCA (
    COD_MARCA INT PRIMARY KEY, 
    NOME VARCHAR(20)
);

INSERT INTO MARCA
VALUES
(1, 'TOYOTA'),
(2, 'CHEVROLET'),
(3, 'FORD');

-- Tabela de Tipos (referência para CARRO)
CREATE TABLE TIPO (
    COD_TIPO INT PRIMARY KEY, 
    NOME VARCHAR(20)
);

INSERT INTO TIPO 
VALUES
(1, 'HATCH'),
(2, 'SUV'),
(3, 'SEDAN');

-- Tabela de Carros (referência para LOJA_CARRO)
CREATE TABLE CARRO (
    COD_CARRO INT PRIMARY KEY,
    COD_COR INT,
    COD_MARCA INT,
    COD_TIPO INT,
    NOME VARCHAR(20),
    PRECO FLOAT,
    ANO VARCHAR(20),
    QTD_EM_ESTOQUE INT,
    FOREIGN KEY (COD_COR) REFERENCES COR(COD_COR),
    FOREIGN KEY (COD_MARCA) REFERENCES MARCA(COD_MARCA),
    FOREIGN KEY (COD_TIPO) REFERENCES TIPO(COD_TIPO)
);

INSERT INTO CARRO 
VALUES
(1, 1, 1, 1, 'COROLLA', 150000.00, '2024', 10),
(2, 2, 2, 2, 'ONIX', 85000.00, '2023', 10),
(3, 3, 3, 3, 'RANGER', 190000.00, '2022', 10);

-- Tabela de associação entre Loja e Carro (referência a LOJA e CARRO, usada por ITEM_VENDA)
CREATE TABLE LOJA_CARRO (
	COD_LOJA_CARRO INT PRIMARY KEY,
	COD_LOJA INT, 
	COD_CARRO INT,
	FOREIGN KEY (COD_LOJA) REFERENCES LOJA(COD_LOJA),
	FOREIGN KEY (COD_CARRO) REFERENCES CARRO(COD_CARRO)
);

INSERT INTO LOJA_CARRO (COD_LOJA_CARRO, COD_LOJA, COD_CARRO) VALUES
(1, 1, 1),
(2, 1, 2),
(3, 1, 3),
(4, 2, 1),
(5, 2, 2),
(6, 2, 3),
(7, 3, 1),
(8, 3, 2),
(9, 3, 3);

-- Triggers
CREATE OR REPLACE FUNCTION total_da_venda() RETURNS TRIGGER AS 
$$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- Atualiza o valor total da venda
        UPDATE VENDA 
        SET VALOR_TOTAL = (
            SELECT SUM(IV.QTD_DE_ITENS * C.PRECO)
            FROM ITEM_VENDA AS IV
            JOIN LOJA_CARRO AS LC ON IV.COD_LOJA_CARRO = LC.COD_LOJA_CARRO
            JOIN CARRO AS C ON LC.COD_CARRO = C.COD_CARRO
            WHERE IV.COD_VENDA = NEW.COD_VENDA
        )
        WHERE COD_VENDA = NEW.COD_VENDA;

        -- Atualiza o estoque do carro
        UPDATE CARRO 
        SET QTD_EM_ESTOQUE = QTD_EM_ESTOQUE - NEW.QTD_DE_ITENS
        WHERE COD_CARRO = (
            SELECT LC.COD_CARRO
            FROM LOJA_CARRO AS LC
            WHERE LC.COD_LOJA_CARRO = NEW.COD_LOJA_CARRO
        );

    ELSIF TG_OP = 'UPDATE' THEN
        -- Recalcula o total da venda
        UPDATE VENDA 
        SET VALOR_TOTAL = (
            SELECT SUM(IV.QTD_DE_ITENS * C.PRECO)
            FROM ITEM_VENDA AS IV
            JOIN LOJA_CARRO AS LC ON IV.COD_LOJA_CARRO = LC.COD_LOJA_CARRO
            JOIN CARRO AS C ON LC.COD_CARRO = C.COD_CARRO
            WHERE IV.COD_VENDA = NEW.COD_VENDA
        )
        WHERE COD_VENDA = NEW.COD_VENDA;

        -- Devolve estoque antigo
        UPDATE CARRO
        SET QTD_EM_ESTOQUE = QTD_EM_ESTOQUE + OLD.QTD_DE_ITENS
        WHERE COD_CARRO = (
            SELECT LC.COD_CARRO
            FROM LOJA_CARRO AS LC
            WHERE LC.COD_LOJA_CARRO = OLD.COD_LOJA_CARRO
        );

        -- Reduz estoque novo
        UPDATE CARRO
        SET QTD_EM_ESTOQUE = QTD_EM_ESTOQUE - NEW.QTD_DE_ITENS
        WHERE COD_CARRO = (
            SELECT LC.COD_CARRO
            FROM LOJA_CARRO AS LC
            WHERE LC.COD_LOJA_CARRO = NEW.COD_LOJA_CARRO
        );

    ELSIF TG_OP = 'DELETE' THEN
        -- Recalcula o total da venda
        UPDATE VENDA 
        SET VALOR_TOTAL = (
            SELECT COALESCE(SUM(IV.QTD_DE_ITENS * C.PRECO), 0)
            FROM ITEM_VENDA AS IV
            JOIN LOJA_CARRO AS LC ON IV.COD_LOJA_CARRO = LC.COD_LOJA_CARRO
            JOIN CARRO AS C ON LC.COD_CARRO = C.COD_CARRO
            WHERE IV.COD_VENDA = OLD.COD_VENDA
        )
        WHERE COD_VENDA = OLD.COD_VENDA;

        -- Devolve estoque do carro
        UPDATE CARRO 
        SET QTD_EM_ESTOQUE = QTD_EM_ESTOQUE + OLD.QTD_DE_ITENS
        WHERE COD_CARRO = (
            SELECT LC.COD_CARRO
            FROM LOJA_CARRO AS LC
            WHERE LC.COD_LOJA_CARRO = OLD.COD_LOJA_CARRO
        );
    END IF;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER total_da_venda_tr 
AFTER INSERT OR UPDATE OR DELETE ON ITEM_VENDA
FOR EACH ROW EXECUTE FUNCTION total_da_venda();