CREATE OR REPLACE FUNCTION fn_atualiza_qtd_vendida_funcionario()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        UPDATE FUNCIONARIO
        SET QTD_VENDIDA_NO_MES = COALESCE(QTD_VENDIDA_NO_MES, 0) + NEW.VALOR_TOTAL
        WHERE COD_FUNCIONARIO = NEW.COD_FUNCIONARIO;

    ELSIF TG_OP = 'UPDATE' THEN
        IF OLD.VALOR_TOTAL IS DISTINCT FROM NEW.VALOR_TOTAL OR OLD.COD_FUNCIONARIO IS DISTINCT FROM NEW.COD_FUNCIONARIO THEN
            IF OLD.COD_FUNCIONARIO IS NOT NULL THEN
                UPDATE FUNCIONARIO
                SET QTD_VENDIDA_NO_MES = COALESCE(QTD_VENDIDA_NO_MES, 0) - OLD.VALOR_TOTAL
                WHERE COD_FUNCIONARIO = OLD.COD_FUNCIONARIO;
            END IF;

            UPDATE FUNCIONARIO
            SET QTD_VENDIDA_NO_MES = COALESCE(QTD_VENDIDA_NO_MES, 0) + NEW.VALOR_TOTAL
            WHERE COD_FUNCIONARIO = NEW.COD_FUNCIONARIO;
        END IF;

    ELSIF TG_OP = 'DELETE' THEN
        UPDATE FUNCIONARIO
        SET QTD_VENDIDA_NO_MES = COALESCE(QTD_VENDIDA_NO_MES, 0) - OLD.VALOR_TOTAL
        WHERE COD_FUNCIONARIO = OLD.COD_FUNCIONARIO;
    END IF;

    RETURN NULL; 
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tg_atualiza_qtd_vendida_funcionario
AFTER INSERT OR UPDATE OR DELETE ON VENDA
FOR EACH ROW
EXECUTE FUNCTION fn_atualiza_qtd_vendida_funcionario();

